The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
commands.lua
local function command(name, user_command, opts)
	local defaults = {
		bar = true,
		nargs = "?",
	}
	opts = vim.tbl_extend("force", defaults, opts or {})
	vim.api.nvim_create_user_command(name, user_command, opts)
end

-- Neovim dev

command("ReloadModule", function(input)
	require("plenary.reload").reload_module(input.fargs[1])
	require(input.fargs[1])
end, { nargs = 1 }) -- `bar=true` lets me chain commands afte with |

-- Open snippets for current filetype
command("LuasnipEditCurrent", function()
	require("luasnip.loaders").edit_snippet_files()
end)

-- Sessions
local sessions = require("mini.sessions")
command("SessionStart", function()
	local path = vim.fn.getcwd()
	path = vim.fn.fnameescape(path)
	path = path:gsub("/", "%%")
	sessions.write(path)
end)

command("SessionStop", function()
	vim.v.this_session = ""
end)

command("SessionToggle", function()
	if vim.v.this_session == "" then
		vim.cmd([[SessionStart]])
	else
		vim.cmd([[ SessionStop ]])
	end
end)

command("SessionRead", function()
	local path = vim.fn.getcwd()
	path = vim.fn.fnameescape(path)
	path = path:gsub("/", "%%")

	local existing_sessions = vim.tbl_keys(sessions.detected)
	if not vim.tbl_contains(existing_sessions, path) then
		vim.notify("No session for CWD exists", vim.log.levels.INFO)
	else
		sessions.read(path)
	end
end)

command("SessionSelect", function(inp)
	if inp.args == "" then
		sessions.select()
	else
		sessions.select(inp.args)
	end
end)

command("TmuxPickRestore", function ()
    require("utils.telescope-utils").choose_restore_tmux()
end)

----
keymaps.lua
-- used for conjure, also:
-- https://www.reddit.com/r/vim/comments/bkfaff/localleader_what_are_you_guys_using_this_for/
--
--
-- marks.nvim
-- mx              Set mark x
-- m,              Set the next available alphabetical (lowercase) mark
-- m;              Toggle the next available mark at the current line
-- dmx             Delete mark x
-- dm-             Delete all marks on the current line
-- dm<space>       Delete all marks in the current buffer
-- m]              Move to next mark
-- m[              Move to previous mark
-- m:              Preview mark. This will prompt you for a specific mark to
--                 preview; press <cr> to preview the next mark.
-- m[0-9]          Add a bookmark from bookmark group[0-9].
-- dm[0-9]         Delete all bookmarks from bookmark group[0-9].
-- m}              Move to the next bookmark having the same type as the bookmark under
--                 the cursor. Works across buffers.
-- m{              Move to the previous bookmark having the same type as the bookmark under
--                 the cursor. Works across buffers.
-- dm=             Delete the bookmark under the cursor.
--

--
local map = vim.keymap.set
local opts = { noremap = true, silent = true }

map("i", "jk", "<esc>`^", opts)
map("i", "kj", "<esc>`^", opts)
map("i", "<esc>", "<nop>") -- get the jk and kj to stick
map("n", "]q", ":cn<CR>", opts)
map("n", "[q", ":cp<CR>", opts)
map("n", "<leader>q", require("utils.utils").toggle_qflist, opts)
map("n", "<leader><leader>q", "q", opts)
map("n", "<leader><leader>Q", "Q", opts)
-- so shift-tab works
map("i", "<S-Tab>", "<C-d>", opts)
map("n", "<esc>", ":noh<CR>", opts)
map("n", "]b", ":bn<CR>", opts)
map("n", "[b", ":bp<CR>", opts)
map("t", "jk", [[<C-\><C-n>]], opts)
map("t", "kj", [[<C-\><C-n>]], opts)


map("t", "<C-h>", [[<Cmd>:TmuxNavigateLeft<CR>]], opts)
map("t", "<C-j>", [[<Cmd>:TmuxNavigateDown<CR>]], opts)
map("t", "<C-k>", [[<Cmd>:TmuxNavigateUp<CR>]], opts)
map("t", "<C-l>", [[<Cmd>:TmuxNavigateRight<CR>]], opts)
map("n", "<leader>du", ":lua require('dapui').toggle()<CR>", opts)
map("n", "<leader>db", ":lua require('dap').toggle_breakpoint()<CR>", opts)
map("n", "<leader>dc", ":lua require('dap').continue()<CR>", opts)
map("n", "<leader>dol", ":lua require('osv').launch({port=8086})<CR>", opts)
map("n", "<leader>ss", "<cmd>SessionToggle<CR>", opts)
map("n", "<leader>sr", "<cmd>SessionRead<CR>", opts)
map("n", "<leader>sf", "<cmd>SessionSelect<CR>", opts)
map("n", "<leader>sd", "<cmd>SessionSelect delete<CR>", opts)


local function on_attach_lsp(_, bufnr)
	local bufopts = { noremap = true, silent = true, buffer = bufnr }
	local legendary = require("legendary")

	local keymaps = {
		{
			"]d",
			"<cmd>Lspsaga diagnostic_jump_next<CR>",
			description = "Jump to next diagnostic message of the current buffer",
			opts = bufopts,
		},
		{
			"[d",
			"<cmd>Lspsaga diagnostic_jump_prev<CR>",
			description = "Jump to previous diagnostic message of the current buffer",
			opts = bufopts,
		},
		{
			"<leader>lg",
			"<cmd>Lspsaga show_line_diagnostics<CR>",
			description = "Show diagnostic messages for the current line of the current buffer",
			opts = bufopts,
		},
		{
			"<leader>ld",
			":Telescope diagnostics bufnr=0<CR>",
			description = "List diagnostics messages for the current buffer",
			opts = bufopts,
		},
		{
			"<leader>lD",
			":Telescope diagnostics<CR>",
			description = "List diagnostic messages for all buffers",
			opts = bufopts,
		},
		{
			"]e",
			function()
				require("lspsaga.diagnostic"):goto_next({ severity = vim.diagnostic.severity.ERROR })
			end,
			opts = {noremap = true, silent = true},
		},
		{
			"[e",
			function()
				require("lspsaga.diagnostic"):goto_prev({ severity = vim.diagnostic.severity.ERROR })
			end,
			opts = {noremap = true, silent = true},
		},
		{
			"<leader>lp",
			"<cmd>Lspsaga peek_definition<CR>",
			description = "Preview definition of the symbol under the cursor",
			opts = bufopts,
		},
		{
			"<leader>lr",
			"<cmd>Lspsaga rename<CR>",
			description = "Rename symbol under the cursor",
			opts = bufopts,
		},
		{
			"<leader>la",
			"<cmd>Lspsaga code_action<CR>",
			description = "Show code actions for the symbol under the cursor",
			opts = bufopts,
		},
		{
			"<leader>lt",
			vim.lsp.buf.type_definition,
			description = "Jumps to the definition of the type of the symbol under the cursor",
			opts = bufopts,
		},
		{
			"<leader>lb",
			":lua vim.lsp.buf.format { async = true }<CR>",
			mode = { "n", "v" },
			description = "Format the current buffer or selected text",
			opts = bufopts,
		},
		{
			"<leader>ls",
			":Telescope lsp_document_symbols<CR>",
			description = "List symbols for the current buffer",
			opts = bufopts,
		},
		{
			"<leader>lS",
			":Telescope lsp_dynamic_workspace_symbols<CR>",
			description = "List symbols for the workspace",
			opts = bufopts,
		},
		{
			"<leader>l0",
			"<cmd>LSoutlineToggle<CR>",
			description = "Toggle LSP symbol outline",
			opts = bufopts,
		},
		{
			"<leader>lhi",
			":Telescope lsp_incoming_calls<CR>",
			description = "List incoming LSP calls",
			opts = bufopts,
		},
		{
			"<leader>lho",
			":Telescope lsp_outgoing_calls<CR>",
			description = "List outgoing LSP calls",
			opts = bufopts,
		},
		{
			"gl",
			"<cmd>Lspsaga lsp_finder<CR>",
			opts = bufopts,
		},
		{
			"gD",
			vim.lsp.buf.declaration,
			opts = bufopts,
		},
		{
			"K",
			"<cmd>Lspsaga hover_doc<CR>",
			description = "Show documentation for the symbol under the cursor",
			opts = bufopts,
		},
		{
			"gd",
			":Telescope lsp_definitions<CR>",
			description = "Jump to the definition of the symbol under the cursor.",
			opts = bufopts,
		},
		{
			"gr",
			":Telescope lsp_references<CR>",
			description = "List all references to the symbol under the cursor.",
			opts = bufopts,
		},
		{
			"L",
			vim.lsp.buf.signature_help,
			description = "Display signature help for the symbol under the cursor.",
			opts = bufopts,
		},
		{
			"<leader>gi",
			vim.lsp.buf.implementation,
			description = "Jump to the implementation of the symbol under the cursor.",
			opts = bufopts,
		},
		{
			"<leader>lwa",
			vim.lsp.buf.add_workspace_folder,
			description = "Add the current folder to the workspace folders of the current LSP client.",
			opts = bufopts,
		},
		{
			"<leader>lwr",
			vim.lsp.buf.remove_workspace_folder,
			description = "Remove the current folder from the workspace folders of the current LSP client.",
			opts = bufopts,
		},
		{
			"<leader>lwl",
			function()
				print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
			end,
			description = "List all workspace folders of the current LSP client.",
			opts = bufopts,
		},
	}
	legendary.itemgroup({
		itemgroup = "LSP keymaps",
		keymaps = keymaps,
	})
end

local toggleterm = {
	open_mapping = "<C-F>",
}
-- to avoid evaluating requires right away
local function telescope_lazy()
	return {
		default = {
			mappings = {
				-- this + send to quickfix is really useful, using fzf's filtering capabilities
				n = {
					["<C-g>"] = require("telescope.actions").select_all,
				},
				i = {
					["<C-g>"] = require("telescope.actions").select_all,
				},
			},
		},
		pickers = {
			buffers = {
				mappings = {
					-- delete buffer from menu
					n = {
						["<C-d>"] = require("telescope.actions").delete_buffer,
					},
					i = {
						["<C-d>"] = require("telescope.actions").delete_buffer,
					},
				},
			},
			quickfixhistory = {
				mappings = {
					n = {
						["<CR>"] = function(prompt_bufnr)
							local selection = require("telescope.actions.state").get_selected_entry()
							local qf_index = selection.index
							require("telescope.actions").close(prompt_bufnr)
							vim.cmd("silent " .. qf_index .. "chistory")
							vim.cmd("copen")
						end,
					},
					i = {
						["<CR>"] = function(prompt_bufnr)
							local selection = require("telescope.actions.state").get_selected_entry()
							local qf_index = selection.index
							require("telescope.actions").close(prompt_bufnr)
							vim.cmd("silent " .. qf_index .. "chistory")
							vim.cmd("copen")
						end,
					},
				},
			},
		},
	}
end

local mini = {
	ai = {
		goto_left = "[g",
		goto_right = "]g",
	},
}

return {
	on_attach_mappings = on_attach_lsp,
	telescope_lazy = telescope_lazy,
	mini = mini,
	toggleterm = toggleterm,
}

----
consts.lua

M = {}

-- $ZK_NOTEBOOK_DIR instead
M.notes_home = "/home/alf/Documents/Library/Notes/zk_notes"
M.tmux_path = "/home/alf/.tmux/resurrect"
M.external_deps = "/home/alf/.config/nvim/external_deps"

return M

----
autocommands.lua
require("legendary").autocmd({
    name = "main autocmds",
    clear = true,
    {
        "BufEnter",
        vim.cmd("silent! lcd %:p:h"),
        opts = {},
        description = "Change directory to current file's parent",
    },
    {
        "BufEnter",
        vim.cmd('if isdirectory(expand("%")) | enew | Neotree'),
        opts = {
            once = true,
        },
        description = "Open Neotree if nvim is opened on a directory",
    },
    {
        "BufNew",
        function()
            if (vim.bo.buftype == "nofile") then
                vim.cmd([[
             setlocal foldlevel=4
            ]])
            end
        end,
        opts = {},
        description = "Set foldlevel to 3 on BufReadPost or FileReadPost for markdown files",
    },
})

----
.gptignore
plugins/**

----
utils/utils.lua
Utils = {}

function Utils.split(str, delim)
	local res = {}
	for match in str:gmatch(string.format("[^%s]+", delim)) do
		table.insert(res, match)
	end
	return res
end

function Utils.find_files_in_root()
	local root = require("project_nvim.project").get_project_root()
	if root ~= nil then
		require("telescope.builtin").find_files({
			cwd = root,
		})
	else
		print("No root found")
	end
end

function Utils.toggle_qflist()
	local win_status = (vim.fn.getqflist({ winid = 1 }))
	if win_status.winid == 0 then
		vim.cmd("copen")
	else
		vim.cmd("cclose")
	end
end

return Utils

----
utils/snip-utils.lua
---@diagnostic disable: lowercase-global
local ls = require("luasnip")
local s = ls.snippet
local sn = ls.snippet_node
local isn = ls.indent_snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local r = ls.restore_node
local events = require("luasnip.util.events")
local ai = require("luasnip.nodes.absolute_indexer")
local fmt = require("luasnip.extras.fmt").fmt
local extras = require("luasnip.extras")
local m = extras.m
local l = extras.l
local rep = extras.rep
local postfix = require("luasnip.extras.postfix").postfix

M = {}

function M.selected(_, snip)
	local env = snip.env
	-- wrap in a snippet node to allow jumping into if no text select
	return sn(1, { i(1, env.LS_SELECT_RAW) })
end

function M.wrap_node(trigger, str)
	return s(
		trigger,
		fmt(str, {
			wrapped = d(1, M.selected, {}),
			exit = i(0),
		})
	)
end

return M

--END--